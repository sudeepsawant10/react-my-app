/*
- React lifecycle methods cannot be used in functional component eg. componenetDidMount cannot be used in functional components
- .js or .jsx both are valid for functional component
- no render method used in functional coponents
- functional component can accept and use props
- for ui design or presentation
eg. funcation App(){
  return ();
}

PS D:\Sudeep\reactjs\react-my-app> node --version
v18.16.0
PS D:\Sudeep\reactjs\react-my-app> npm --version
9.5.1
PS D:\Sudeep\reactjs\react-my-app> npx --version
9.5.1
PS D:\Sudeep\reactjs\react-my-app> react --version

class component:
- make use of es6 classes and extend the component class in React
- sometimes called 'start' or 'stateful' components as they tend to implement logic and state
- React lifecycle methods can be used inside class component 
- you can pass props down to class components and access them with this.props
we cannot import class component like this
import { Header } from './components/Header';

Hooks are js functions, but they impose two additional rules:
1. only call Hooks at the top level.
- Don't call Hooks inside loops, conditions or nested functions

2. Only call Hooks from React function components.
  - Don't call Hooks from regular js functions.
  (There is just one other valid place to call Hooks - Your own custom Hoooksl)

PROPS:
- to send the values to components from component calling tag
- we cannot change the value of props in component once it is set
- Don't need to receive props in class component(we use this.props)
- props are immutable

STATE:
- state is managed with in the component
- State can be changed
- UseState Hook -> Functional component
- this.state -> class component

Event Handling - Pranthesis:
- while defining onClick function it should be function not a function call using paranthesis
- if we do so it will call function before the event

- cannot access this in function present in function component

HANDLING THIS AND BIND:
- we cannot use function keyword in class component
- if we use arrow function we don't need to bind this we can use it automatically

END OF EVENT HANDLING - PREVENT DEFAULT BEHAVIOR
- accessing props in state in class component
- when passing props to class component you have to receive it using constructor and call super(props)

FRAGMENT IN REACT
- takes jsx wrap in single element
- why fragment = to avoid unnecessary div tag
- fragment is used to group multiple element without using div
return(
  <React.Fragment>
  <h1></h1>
  <div></div>
  <span></span>
  </React.Fragment>
)

LIST IN REACT
- we use map() to iterate item in list it takes call back function
- callbacks are a great way to handle something after something else has been completed

MANAGE LIST DATA OBJECT USING STATE & PROPS
- access = onsole.log(this.state.users[0].name)

KEY IN REACTJS
- key to modify, delete, retrive of item
- list must have unique element key props
- one page will have all unique key 

STYLING & CSS 
- Template literal for applying multiple classes.
- we can apply css using module.css for specific task to apply css it dosen't work on any other component

REACT FORM USING STATE ALONG WITH EVENT HANDLING
- give value = this.state.elment

ROUTING IN REACT
- npm install react-router-dom
- contains BrowserRouter import as Router
- contains Switch, Route, Link
1221

In react-router-dom v6, "Switch" is replaced by routes "Routes". You need to update the import from

REACT LIFE-CYCLE METHODS
- applies on class component
- call this method whent there is need
phases=> Mounting, Updating, Unmounting
html is created in first virtual dom then it will effect on actual dom the whole process is called Mounting
changes on the html using state props is called Updating
Deleting the html created in actual dom is called unmounting

Mounting Methods
- getDerivedStateFromProps => Static methods returns something => Get called Before rendering
- componentDidMount => Get called After rendering (called at last)

Updating Methods
- componentDidUpdate => gets called on update of element on dom

HTTP GET REQUEST - Fetch data from REST API
getDerivedStateFromProps 
- It is used both in mounting and updating
- It gets called when state is changing because of props

HTTP GET REQUEST - FETCH DATA FROM REST API
- AXIOS LIABRARY=> npm i axios
- jsonplaceholder = (fake rest api)
- To call any webservice, api make use of componentDidMount

MAP FUNCTION array map
POST REQUEST

REACT HOOKS:
- hooks are introduce in react 16.8 version
- you need hooks to use any thing from class component into functional component
- hooks are functions that lety you "hook into" React state and lifecycle features from function components.
- Hooks allow you to use React without classes. It menns you can use State and other react features without writing a class
- React provides a few built-in Hooks like useState, useEffect etc

useState HOOK:
- takes const variable and function

useEffect 
- it will call when component is rendered or upated
- takes call back and const variable (optional on which useeffect will work)
*/ 